#+TITLE: Meeting: Collapsing Git Graphs
#+AUTHOR: Correl Roush
#+DATE: 2015-12-03 23:49
#+STARTUP: indent inlineimages showall hideblocks
#+OPTIONS: toc:nil num:nil
#+PROPERTY: header-args :exports results :results silent
#+KEYWORDS: emacs org-mode git graphviz

#+begin_src emacs-lisp :exports results :results silent
  (defun vector-image (name)
    (let ((basename (concat "../files/" (file-name-base buffer-file-name) "-" name)))
      (cond ((eq org-export-current-backend 'latex)
             (concat basename ".eps"))
            (t (concat basename ".svg")))))
#+end_src

#+name: inline-image
#+begin_src emacs-lisp :exports none :var name="example"
  (if (org-export-derived-backend-p org-export-current-backend 'html)
      (concat "#+BEGIN_HTML\n"
              (let ((image-file (vector-image name)))
                (with-temp-buffer
                  (insert-file-contents image-file)
                  (buffer-string)))
              "#+END_HTML\n")
    (concat "[[file:" (vector-image name) "]]\n"))
#+end_src

#+BEGIN_SRC emacs-lisp :exports results :results silent
  (load-file (expand-file-name
              "~/code/correl.github.io/files/git-graph.el"))
#+END_SRC

This meeting, we saw how commits in a git repository form a
distributed acyclic graph that can be visualized with graphviz.

The article discussed was [[http://correl.phoenixinquis.net/2015/07/12/git-graphs.html][Drawing Git Graphs with Graphviz and
Org-Mode]].

* Slides
#+BEGIN_HTML
<p>
    <a href="{{ site.baseurl }}/slides/git-dags.pdf"><img src="{{ site.baseurl }}/slides/git-dags-0.png" /></a>
    <a href="{{ site.baseurl }}/slides/git-dags.pdf"><img src="{{ site.baseurl }}/slides/git-dags-1.png" /></a>
</p>
<p>
    <a href="{{ site.baseurl }}/slides/git-dags.pdf">Download PDF</a>
</p>
#+END_HTML
* Exercise

After going through the article, we attempted to build out the history
collapsing feature proposed in it.

** Example graph
The following graph mimics the git repo built in the blog post:

#+name: git-graph-example
#+begin_src emacs-lisp :exports code :results silent
  (setq example-graph
        (git-graph/group-topo
         (list (git-graph/make-node 1 '(7 2) '((label . master)))
               (git-graph/make-node 2 '(5 3) '((label . develop)))
               (git-graph/make-node 3 '(4) '((label . feature-1)))
               (git-graph/make-node 4 '(5))
               (git-graph/make-node 5 '(6))
               (git-graph/make-node 6 '(7))
               (git-graph/make-node 7 '(8))
               (git-graph/make-node 8 nil))))

  (git-graph/to-graphviz-pretty
   "autogroups"
   example-graph)
#+end_src

#+BEGIN_SRC dot :file (vector-image "example") :noweb yes
  <<git-graph-example()>>
#+END_SRC

#+CALL: inline-image(name="example") :results raw replace

#+RESULTS:
[[file:../files/2015-12-02-git-dags-example.svg]]

** Filtering out branches
We first create a basic filtering function:
#+BEGIN_SRC emacs-lisp :exports code :results silent
  (defun git-graph/filter (predicate graph)
    (-filter predicate graph))
#+END_SRC

Then, we'll filter out the feature branch. Since graph nodes are
grouped by id, not label, we filter out nodes grouped under the
feature branch's id, which is =3=.

#+name: git-graph-without-feature
#+BEGIN_SRC emacs-lisp :exports code :results silent
  (git-graph/to-graphviz-pretty
   "git"
   (git-graph/filter
    (lambda (node)
      (not (eq 3 (git-graph/node-group node))))
    example-graph))
#+END_SRC

#+BEGIN_note
To avoid leaving a dangling node, the graph generation functions
needed to be updated to not draw an edge to a parent not present in
the graph:

#+BEGIN_SRC diff :exports code
  @@ -120,7 +120,9 @@ nodes are defined first, followed by the edges between them.
          (-map #'git-graph/to-graphviz-node nodes)
          "\n")
          (string-join
  -        (-uniq (-flatten (-map #'git-graph/to-graphviz-edges nodes)))
  +        (-uniq (-flatten (-map
  +                          (lambda (node) (git-graph/to-graphviz-edges node nodes))
  +                          nodes)))
           "\n")
           "}")
        "\n"))
  @@ -165,11 +167,13 @@ parents.
 
   ,#+name: git-graph/to-graphviz-edges
   ,#+begin_src emacs-lisp
  -  (defun git-graph/to-graphviz-edges (node)
  +  (defun git-graph/to-graphviz-edges (node &optional nodelist)
       (let ((node-id (git-graph/node-id node))
  -          (parents (git-graph/node-parents node)))
  +          (parents (git-graph/node-parents node))
  +          (node-ids (-map 'git-graph/node-id nodelist)))
         (-map (lambda (parent)
  -              (git-graph/to-graphviz-edge node-id parent))
  +              (unless (and nodelist (not (member parent node-ids)))
  +                (git-graph/to-graphviz-edge node-id parent)))
               parents)))
 
     (defun git-graph/to-graphviz-edge (from to)
#+END_SRC
#+END_note

#+BEGIN_SRC dot :noweb yes :file (vector-image "no-feature")
<<git-graph-without-feature()>>
#+END_SRC

#+CALL: inline-image(name="no-feature") :results raw replace

#+RESULTS:
[[file:../files/2015-12-02-git-dags-no-feature.svg]]

** Filtering out intermediate commits

The next goal is to filter out unnecessary commits, defined as any
commit that isn't a branch or merge point. Given the graph above, the
intent is to filter out the initial commit, and the middle commit on
the develop branch.

We'll filter out single-parent nodes that are not branch points (the
first node in a new group):

#+name: git-graph-without-intermediate
#+BEGIN_SRC emacs-lisp :exports code :results silent
  (defun git-graph/intermediate-commit-p (node)
    (and (> 2 (length (git-graph/node-parents node)))
         (not (eq (git-graph/node-id node)
                  (git-graph/node-group node)))))

  (git-graph/to-graphviz-pretty
   "git"
   (git-graph/filter
    (lambda (node)
      (not (git-graph/intermediate-commit-p node)))
    (git-graph/filter
     (lambda (node)
       (not (eq 3 (git-graph/node-group node))))
     example-graph)))
#+END_SRC

#+BEGIN_SRC dot :noweb yes :file (vector-image "no-intermediate")
<<git-graph-without-intermediate()>>
#+END_SRC

#+CALL: inline-image(name="no-intermediate") :results raw replace

#+RESULTS:
[[file:../files/2015-12-02-git-dags-no-intermediate.svg]]

It turns out our criteria were too broad; we've lost the merge-base
and merge-base child commit that started the develop branch.
Unfortunately, we ran out of time before getting any further. If
anyone would like to take a crack at this, feel free to post your
solutions to the google group.
